-- Define initial customization options
local defaultHighlightColor = Color3.fromRGB(255, 255, 255) -- Default white color if no team color is found
local outlineColor = Color3.fromRGB(0, 0, 0) -- Black outline color
local fillTransparency = 0.5 -- Transparency of the fill
local outlineTransparency = 0 -- Transparency of the outline
local maxDistance = 500 -- Maximum distance to show highlights
local highlightColor = Color3.fromRGB(255, 255, 255) -- Selected highlight color
local isFlashing = false -- Toggle for flashing effect

-- Toggle variable
local highlightsEnabled = true

-- Table to keep track of players and their distances
local playerDistances = {}

-- Function to get the highlight color based on the player's team
local function getHighlightColor(player)
    local team = player.Team
    if team then
        return team.TeamColor.Color
    else
        return highlightColor
    end
end

-- Function to create highlight for a player
local function createHighlight(player)
    local character = player.Character or player.CharacterAdded:Wait()
    if character and not character:FindFirstChild("PlayerHighlight") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "PlayerHighlight"
        highlight.Adornee = character
        highlight.FillColor = getHighlightColor(player)
        highlight.OutlineColor = outlineColor
        highlight.FillTransparency = fillTransparency
        highlight.OutlineTransparency = outlineTransparency
        highlight.Parent = character
    end
end

-- Function to remove highlight from a player
local function removeHighlight(player)
    local character = player.Character
    if character then
        local highlight = character:FindFirstChild("PlayerHighlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

-- Function to update highlights based on distance
local function updateHighlights()
    local localPlayer = game.Players.LocalPlayer
    local localCharacter = localPlayer.Character
    if localCharacter and localCharacter.PrimaryPart then
        local localPosition = localCharacter.PrimaryPart.Position
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= localPlayer then
                local character = player.Character
                if character and character.PrimaryPart then
                    local distance = (localPosition - character.PrimaryPart.Position).Magnitude
                    playerDistances[player] = distance
                    if distance <= maxDistance then
                        createHighlight(player)
                    else
                        removeHighlight(player)
                    end
                end
            end
        end
    end
end

-- Batch processing function
local function batchUpdateHighlights()
    for _, player in pairs(game.Players:GetPlayers()) do
        if highlightsEnabled and playerDistances[player] and playerDistances[player] <= maxDistance then
            createHighlight(player)
        else
            removeHighlight(player)
        end
    end
end

-- Create toggle button with a smaller red-green switch
local function createToggleButton()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ToggleHighlightGui"
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 100)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background
    frame.BorderSizePixel = 0
    frame.BackgroundTransparency = 0.2
    frame.Parent = screenGui

    -- Create rounded edges
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 15) -- Rounded corners
    UICorner.Parent = frame

    -- Toggle Button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 180, 0, 50)
    toggleButton.Position = UDim2.new(0, 10, 0, 10)
    toggleButton.Text = "Disable Highlights"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
    toggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background
    toggleButton.Parent = frame

    -- Smaller Red-Green Switch
    local switch = Instance.new("Frame")
    switch.Size = UDim2.new(0, 30, 0, 30) -- Reduced size
    switch.Position = UDim2.new(0, 140, 0, 10)
    switch.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Start as red
    switch.Parent = frame

    local UICornerSwitch = Instance.new("UICorner")
    UICornerSwitch.CornerRadius = UDim.new(1, 0) -- Round shape for switch
    UICornerSwitch.Parent = switch

    toggleButton.MouseButton1Click:Connect(function()
        highlightsEnabled = not highlightsEnabled
        if highlightsEnabled then
            toggleButton.Text = "Disable Highlights"
            switch.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green when enabled
            updateHighlights() -- Initial update when enabled
        else
            toggleButton.Text = "Enable Highlights"
            switch.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red when disabled
            -- Remove existing highlights
            for _, player in pairs(game.Players:GetPlayers()) do
                removeHighlight(player)
            end
        end
    end)

    -- Function to create color selection menu
    local function createColorSelectionMenu()
        local colorMenu = Instance.new("Frame")
        colorMenu.Size = UDim2.new(0, 200, 0, 150)
        colorMenu.Position = UDim2.new(0, 10, 0, 120)
        colorMenu.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background
        colorMenu.BorderSizePixel = 0
        colorMenu.BackgroundTransparency = 0.2
        colorMenu.Parent = screenGui

        local UICornerMenu = Instance.new("UICorner")
        UICornerMenu.CornerRadius = UDim.new(0, 15) -- Rounded corners
        UICornerMenu.Parent = colorMenu

        -- Function to create color buttons
        local function createColorButton(color, position)
            local colorButton = Instance.new("TextButton")
            colorButton.Size = UDim2.new(0, 50, 0, 50)
            colorButton.Position = position
            colorButton.BackgroundColor3 = color
            colorButton.Parent = colorMenu

            colorButton.MouseButton1Click:Connect(function()
                highlightColor = color -- Update highlight color
                colorMenu:Destroy() -- Close color menu
            end)
        end

        -- Create color buttons
        createColorButton(Color3.fromRGB(255, 0, 0), UDim2.new(0, 10, 0, 10)) -- Red
        createColorButton(Color3.fromRGB(0, 255, 0), UDim2.new(0, 70, 0, 10)) -- Green
        createColorButton(Color3.fromRGB(0, 0, 255), UDim2.new(0, 130, 0, 10)) -- Blue
        createColorButton(Color3.fromRGB(255, 255, 0), UDim2.new(0, 10, 0, 70)) -- Yellow
        createColorButton(Color3.fromRGB(255, 165, 0), UDim2.new(0, 70, 0, 70)) -- Orange
        createColorButton(Color3.fromRGB(128, 0, 128), UDim2.new(0, 130, 0, 70)) -- Purple

        -- Flashing toggle button
        local flashingButton = Instance.new("TextButton")
        flashingButton.Size = UDim2.new(0, 180, 0, 30)
        flashingButton.Position = UDim2.new(0, 10, 0, 120)
        flashingButton.Text = "Toggle Flashing"
        flashingButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
        flashingButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background
        flashingButton.Parent = colorMenu

        flashingButton.MouseButton1Click:Connect(function()
            isFlashing = not isFlashing -- Toggle flashing
            if isFlashing then
                flashingButton.Text = "Flashing: ON"
            else
                flashingButton.Text = "Flashing: OFF"
            end
        end)

        -- Back to main menu button
        local backButton = Instance.new("TextButton")
        backButton.Size = UDim2.new(0, 180, 0, 30)
        backButton.Position = UDim2.new(0, 10, 0, 150)
        backButton.Text = "Back to Menu"
        backButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
        backButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Черный фон
    backButton.MouseButton1Click:Connect(function()
        colorMenu:Destroy() -- Закрыть меню выбора цвета
    end)
end

-- Добавление функции привязки меню к персонажу
local function attachMenuToPlayer(player)
    player.CharacterAdded:Connect(function(character)
        -- Создание меню для каждого персонажа
        local highlightGui = Instance.new("ScreenGui")
        highlightGui.Name = "PlayerMenu"
        highlightGui.Parent = player:WaitForChild("PlayerGui")

        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 200, 0, 100)
        frame.Position = UDim2.new(0, 10, 0, 10)
        frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Черный фон
        frame.BorderSizePixel = 0
        frame.BackgroundTransparency = 0.2
        frame.Parent = highlightGui

        -- Добавление углов
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 15)
        UICorner.Parent = frame

        -- Кнопка выключения выделений для игрока
        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0, 180, 0, 50)
        toggleButton.Position = UDim2.new(0, 10, 0, 10)
        toggleButton.Text = "Toggle Highlights"
        toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        toggleButton.Parent = frame

        toggleButton.MouseButton1Click:Connect(function()
            highlightsEnabled = not highlightsEnabled
            if highlightsEnabled then
                toggleButton.Text = "Disable Highlights"
                updateHighlights()
            else
                toggleButton.Text = "Enable Highlights"
                -- Удаление выделений у всех игроков
                for _, player in pairs(game.Players:GetPlayers()) do
                    removeHighlight(player)
                end
            end
        end)
    end)
end

-- Привязка меню к каждому игроку
for _, player in pairs(game.Players:GetPlayers()) do
    attachMenuToPlayer(player)
end

game.Players.PlayerAdded:Connect(function(player)
    attachMenuToPlayer(player)
end)

-- Функция для обновления выделений
spawn(function()
    while true do
        if highlightsEnabled then
            updateHighlights()
        end
        wait(0.5) -- Настройка интервала обновления
    end
end)

-- Вызов функции создания кнопки переключения
createToggleButton()