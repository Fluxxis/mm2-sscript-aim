-- Define initial customization options
local defaultHighlightColor = Color3.fromRGB(255, 255, 255) -- Default white color if no team color is found
local outlineColor = Color3.fromRGB(0, 0, 0) -- Black outline color
local fillTransparency = 0.5 -- Transparency of the fill
local outlineTransparency = 0 -- Transparency of the outline
local maxDistance = 500 -- Maximum distance to show highlights

-- Toggle variable
local highlightsEnabled = true

-- Table to keep track of players and their distances
local playerDistances = {}

-- Function to get the highlight color based on the player's team
local function getHighlightColor(player)
    local team = player.Team
    if team then
        return team.TeamColor.Color
    else
        return defaultHighlightColor
    end
end

-- Function to create highlight for a player
local function createHighlight(player)
    local character = player.Character or player.CharacterAdded:Wait()
    if character and not character:FindFirstChild("PlayerHighlight") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "PlayerHighlight"
        highlight.Adornee = character
        highlight.FillColor = getHighlightColor(player)
        highlight.OutlineColor = outlineColor
        highlight.FillTransparency = fillTransparency
        highlight.OutlineTransparency = outlineTransparency
        highlight.Parent = character
    end
end

-- Function to remove highlight from a player
local function removeHighlight(player)
    local character = player.Character
    if character then
        local highlight = character:FindFirstChild("PlayerHighlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

-- Function to update highlights based on distance
local function updateHighlights()
    local localPlayer = game.Players.LocalPlayer
    local localCharacter = localPlayer.Character
    if localCharacter and localCharacter.PrimaryPart then
        local localPosition = localCharacter.PrimaryPart.Position
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= localPlayer then
                local character = player.Character
                if character and character.PrimaryPart then
                    local distance = (localPosition - character.PrimaryPart.Position).Magnitude
                    playerDistances[player] = distance
                    if distance <= maxDistance then
                        createHighlight(player)
                    else
                        removeHighlight(player)
                    end
                end
            end
        end
    end
end

-- Create the GUI with animations and rounded corners
local function createToggleButton()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ToggleHighlightGui"
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Create the main frame with rounded corners and animation
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 300, 0, 200)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0
    mainFrame.BackgroundTransparency = 1
    mainFrame.Parent = screenGui

    -- Round the corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 10)
    uiCorner.Parent = mainFrame

    -- Animation for appearing
    mainFrame:TweenSizeAndPosition(UDim2.new(0, 300, 0, 200), UDim2.new(0.5, -150, 0.5, -100), "Out", "Quad", 0.5)
    mainFrame:TweenTransparency(0, "Out", "Quad", 0.5)

    -- Toggle button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 150, 0, 50)
    toggleButton.Position = UDim2.new(0.5, -75, 0.5, -25)
    toggleButton.AnchorPoint = Vector2.new(0.5, 0.5)
    toggleButton.Text = "Disable Highlights"
    toggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    toggleButton.Parent = mainFrame

    -- Switch (red/green)
    local switch = Instance.new("Frame")
    switch.Size = UDim2.new(0, 50, 0, 20)
    switch.Position = UDim2.new(0.5, -25, 0.7, -10)
    switch.AnchorPoint = Vector2.new(0.5, 0.5)
    switch.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    switch.Parent = mainFrame

    local uiCornerSwitch = Instance.new("UICorner")
    uiCornerSwitch.CornerRadius = UDim.new(0, 10)
    uiCornerSwitch.Parent = switch

    -- Close and Minimize buttons
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 50, 0, 50)
    closeButton.Position = UDim2.new(1, -55, 0, 5)
    closeButton.Text = "X"
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    closeButton.Parent = mainFrame

    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 50, 0, 50)
    minimizeButton.Position = UDim2.new(1, -110, 0, 5)
    minimizeButton.Text = "-"
    minimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    minimizeButton.TextColor3 = Color3.fromRGB(0, 255, 0)
    minimizeButton.Parent = mainFrame

    -- Toggle functionality
    toggleButton.MouseButton1Click:Connect(function()
        highlightsEnabled = not highlightsEnabled
        if highlightsEnabled then
            toggleButton.Text = "Disable Highlights"
            switch.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green switch
            updateHighlights()  -- Initial update when enabled
        else
            toggleButton.Text = "Enable Highlights"
            switch.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red switch
            for _, player in pairs(game.Players:GetPlayers()) do
                removeHighlight(player)
            end
        end
    end)

    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    -- Minimize button functionality
    local minimized = false
    minimizeButton.MouseButton1Click:Connect(function()
        if minimized then
            -- Expand the menu back
            mainFrame:TweenSize(UDim2.new(0, 300, 0, 200), "Out", "Quad", 0.5)
            minimized = false
        else
            -- Minimize the menu to a small button
            mainFrame:TweenSize(UDim2.new(0, 50, 0, 50), "Out", "Quad", 0.5)
            minimized = true
        end
    end)
end

-- Create the toggle button
createToggleButton()

-- Function to remove all highlights when minimizing
local function removeAllHighlights()
    for _, player in pairs(game.Players:GetPlayers()) do
        removeHighlight(player)
    end
end

-- Function to create small button when minimized
local function createMinimizedButton(screenGui)
    local minimizedButton = Instance.new("TextButton")
    minimizedButton.Size = UDim2.new(0, 50, 0, 50)
    minimizedButton.Position = UDim2.new(0, 10, 0, 10)
    minimizedButton.Text = "â¬›"
    minimizedButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    minimizedButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizedButton.Parent = screenGui

    minimizedButton.MouseButton1Click:Connect(function()
        minimizedButton:Destroy()
        -- Expand the main frame again
        mainFrame:TweenSize(UDim2.new(0, 300, 0, 200), "Out", "Quad", 0.5)
        mainFrame.Visible = true
    end)
end

-- Create the toggle button (minimized and maximize animation)
local function createToggleButton()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ToggleHighlightGui"
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 300, 0, 200)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 0
    mainFrame.BackgroundTransparency = 1
    mainFrame.Parent = screenGui

    -- Round corners for main frame
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 10)
    uiCorner.Parent = mainFrame

    -- Animation for appearance
    mainFrame:TweenSizeAndPosition(UDim2.new(0, 300, 0, 200), UDim2.new(0.5, -150, 0.5, -100), "Out", "Quad", 0.5)
    mainFrame:TweenTransparency(0, "Out", "Quad", 0.5)

    -- Toggle Button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 150, 0, 50)
    toggleButton.Position = UDim2.new(0.5, -75, 0.5, -25)
    toggleButton.AnchorPoint = Vector2.new(0.5, 0.5)
    toggleButton.Text = "Disable Highlights"
    toggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    toggleButton.Parent = mainFrame

    -- Switch (red/green)
    local switch = Instance.new("Frame")
    switch.Size = UDim2.new(0, 50, 0, 20)
    switch.Position = UDim2.new(0.5, -25, 0.7, -10)
    switch.AnchorPoint = Vector2.new(0.5, 0.5)
    switch.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    switch.Parent = mainFrame

    -- Round corners for switch
    local uiCornerSwitch = Instance.new("UICorner")
    uiCornerSwitch.CornerRadius = UDim.new(0, 10)
    uiCornerSwitch.Parent = switch

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 50, 0, 50)
    closeButton.Position = UDim2.new(1, -55, 0, 5)
    closeButton.Text = "X"
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    closeButton.Parent = mainFrame

    -- Minimize Button
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Size = UDim2.new(0, 50, 0, 50)
    minimizeButton.Position = UDim2.new(1, -110, 0, 5)
    minimizeButton.Text = "-"
    minimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    minimizeButton.TextColor3 = Color3.fromRGB(0, 255, 0)
    minimizeButton.Parent = mainFrame

    -- Toggle functionality
    toggleButton.MouseButton1Click:Connect(function()
        highlightsEnabled = not highlightsEnabled
        if highlightsEnabled then
            toggleButton.Text = "Disable Highlights"
            switch.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green switch
            updateHighlights() -- Initial update when enabled
        else
            toggleButton.Text = "Enable Highlights"
            switch.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red switch
            removeAllHighlights() -- Remove all highlights
        end
    end)

    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy() -- Destroy the entire GUI
    end)

    -- Minimize button functionality
    local minimized = false
    minimizeButton.MouseButton1Click:Connect(function()
        if not minimized then
            -- Minimize the frame and create a small button
            mainFrame:TweenSize(UDim2.new(0, 50, 0, 50), "Out", "Quad", 0.5)
            mainFrame.Visible = false
            createMinimizedButton(screenGui)
            minimized = true
        else
            -- Expand the frame back
            mainFrame:TweenSize(UDim2.new(0, 300, 0, 200), "Out", "Quad", 0.5)
            mainFrame.Visible = true
            minimized = false
        end
    end)
end

-- Create the toggle button
createToggleButton()

-- Other highlight update logic
spawn(function()
    while true do
        if highlightsEnabled then
            updateHighlights()
        end
        wait(0.5) -- Adjust the interval as needed
    end
end)